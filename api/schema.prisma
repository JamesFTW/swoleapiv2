//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// schema.config.prisma
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

//
// Session.prisma
//

model Session {
  sid    String   @id @db.VarChar(128)
  sess   Json     @db.Json
  expire DateTime @db.Timestamp()

  @@map("session")
}

//
// Exercises.prisma
//

model Exercises {
  exerciseId       Int      @id @unique @default(autoincrement())
  createdAt        DateTime @default(now()) @db.Timestamp(6)
  updatedAt        DateTime @updatedAt
  exerciseName     String   @unique
  targetMuscle     String
  secondaryMuscles Json?
  video            String

  userExercises            UserExercises[]
  templateworkoutexercises TemplateWorkoutExercises[]
  completedWorkouts        CompletedWorkouts[]
}

//
// UserExercises.prisma
//

model UserExercises {
  userExerciseId Int      @id @unique @default(autoincrement())
  exerciseId     Int
  userId         String
  comment        String?
  createdAt      DateTime @default(now()) @db.Timestamp(6)
  updatedAt      DateTime @updatedAt @db.Timestamp(6)

  user     Users     @relation(fields: [userId], references: [userId])
  exercise Exercises @relation(fields: [exerciseId], references: [exerciseId])

  UserExerciseSets UserExerciseSets[]

  @@unique(name: "exerciseId_userId", fields: [exerciseId, userId])
  @@index([userId])
  @@index([exerciseId])
}

//
// UserExerciseSets.prisma
//

model UserExerciseSets {
  userExerciseSetsId Int      @id @unique @default(autoincrement())
  userExerciseId     Int
  userId             String
  setNumber          Int
  setType            String?
  weight             Float?
  reps               Int
  rpe                Int?
  createdAt          DateTime @default(now())

  userExercise UserExercises @relation(fields: [userExerciseId], references: [userExerciseId])
  user         Users         @relation(fields: [userId], references: [userId])
}

//
// Users.prisma
//

model Users {
  profilePhoto String?
  bio          String?
  firstName    String?
  lastName     String?
  salt         String
  userId       String   @id @unique @default(uuid())
  userName     String   @unique
  email        String   @unique
  password     String   @db.VarChar(60)
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @updatedAt

  templateWorkouts  TemplateWorkouts[]
  userExercises     UserExercises[]
  userExerciseSets  UserExerciseSets[]
  scheduledWorkouts ScheduledWorkouts[]
  completedWorkouts CompletedWorkouts[]
  weeklySnapshots   WeeklySnapshots[]
}

//
// CompletedWorkouts.prisma
//

model CompletedWorkouts {
  completedWorkoutId  Int         @id @unique @default(autoincrement())
  userId              String
  comment             String?
  exercises           Exercises[] @relation
  exerciseIds         Int[]
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  minHeartRate        Int?
  maxHeartRate        Int?
  duration            Int
  workoutTitle        String
  caloriesBurned      Int?
  primaryMuscleGroups String[]
  totalVolume         Int?
  totalSets           Int?

  User            Users             @relation(fields: [userId], references: [userId])
  weeklySnapshots WeeklySnapshots[]
}

//
// ScheduledWorkouts.prisma
//

model ScheduledWorkouts {
  scheduledWorkoutsId Int      @id @unique @default(autoincrement())
  templateId          Int
  userId              String
  workoutDate         DateTime
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt @db.Timestamp(6)

  user             Users            @relation(fields: [userId], references: [userId])
  templateWorkouts TemplateWorkouts @relation(fields: [templateId], references: [templateId])
}

//
// TemplateWorkoutExercises.prisma
//

model TemplateWorkoutExercises {
  templateId Int
  exerciseId Int
  setData    Json[]

  templateWorkout TemplateWorkouts @relation(fields: [templateId], references: [templateId])
  exercises       Exercises        @relation(fields: [exerciseId], references: [exerciseId])

  @@id([templateId, exerciseId])
}

//
// TemplateWorkouts.prisma
//

model TemplateWorkouts {
  templateId   Int      @id @unique @default(autoincrement())
  userId       String
  templateName String
  createdAt    DateTime @default(now())

  user Users @relation(fields: [userId], references: [userId])

  templateWorkoutexercises TemplateWorkoutExercises[]
  scheduledWorkouts        ScheduledWorkouts[]
}

//
// WeeklySnapshots.prisma
//

model WeeklySnapshots {
  weeklySnapshotsId   String   @id @default(cuid())
  userId              String
  startDate           DateTime
  endDate             DateTime
  numberOfSets        Int
  totalVolume         Int
  totalWorkoutTime    Int
  completedWorkoutIds Int[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now())

  User              Users               @relation(fields: [userId], references: [userId])
  CompletedWorkouts CompletedWorkouts[]

  @@unique(name: "userId_startDate_endDate", fields: [userId, startDate, endDate])
}
